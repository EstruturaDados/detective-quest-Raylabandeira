#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estrutura da pista (n√≥ da BST)
typedef struct Pista {
    char nome[30];
    struct Pista *esquerda;
    struct Pista *direita;
} Pista;

// Estrutura da sala (n√≥ da √°rvore bin√°ria de navega√ß√£o)
typedef struct Sala {
    char nome[30];
    char pista[30]; // "" se n√£o h√° pista
    struct Sala *esquerda;
    struct Sala *direita;
} Sala;

// Cria uma nova sala
Sala* criarSala(const char *nome, const char *pista, Sala *esq, Sala *dir) {
    Sala *nova = (Sala*)malloc(sizeof(Sala));
    if (nova != NULL) {
        strcpy(nova->nome, nome);
        strcpy(nova->pista, pista);
        nova->esquerda = esq;
        nova->direita = dir;
    }
    return nova;
}

// Cria uma nova pista
Pista* criarPista(const char *nome) {
    Pista *nova = (Pista*)malloc(sizeof(Pista));
    if (nova != NULL) {
        strcpy(nova->nome, nome);
        nova->esquerda = NULL;
        nova->direita = NULL;
    }
    return nova;
}

// Insere pista na BST
Pista* inserir(Pista *raiz, const char *nome) {
    if (raiz == NULL) return criarPista(nome);
    if (strcmp(nome, raiz->nome) < 0)
        raiz->esquerda = inserir(raiz->esquerda, nome);
    else if (strcmp(nome, raiz->nome) > 0)
        raiz->direita = inserir(raiz->direita, nome);
    return raiz;
}

// Exibe pistas em ordem alfab√©tica
void emOrdem(Pista *raiz) {
    if (raiz != NULL) {
        emOrdem(raiz->esquerda);
        printf("üîé %s\n", raiz->nome);
        emOrdem(raiz->direita);
    }
}

// Explora√ß√£o da mans√£o com coleta de pistas
void explorarSalas(Sala *atual, Pista **raizBST) {
    char escolha;
    while (atual != NULL) {
        printf("\nüìç Voc√™ est√° na sala: %s\n", atual->nome);
        if (strlen(atual->pista) > 0) {
            printf("üß© Pista encontrada: %s\n", atual->pista);
            *raizBST = inserir(*raizBST, atual->pista);
        }

        if (atual->esquerda == NULL && atual->direita == NULL) {
            printf("üîç Fim do caminho. Sala sem sa√≠da.\n");
            break;
        }

        printf("Escolha o caminho:\n");
        if (atual->esquerda != NULL) printf("e - Ir para a esquerda\n");
        if (atual->direita != NULL) printf("d - Ir para a direita\n");
        printf("s - Sair da explora√ß√£o\n");
        printf("l - Listar pistas encontradas\n");
        printf("Opcao: ");
        scanf(" %c", &escolha);

        if (escolha == 'e' && atual->esquerda != NULL) {
            atual = atual->esquerda;
        } else if (escolha == 'd' && atual->direita != NULL) {
            atual = atual->direita;
        } else if (escolha == 'l') {
            printf("\nüìú Pistas coletadas (ordem alfab√©tica):\n");
            emOrdem(*raizBST);
        } else if (escolha == 's') {
            printf("üëã Saindo da mans√£o...\n");
            break;
        } else {
            printf("‚ö†Ô∏è Caminho inv√°lido. Tente novamente.\n");
        }
    }
}

int main() {
    // Constru√ß√£o est√°tica da √°rvore de salas
    Sala *cozinha = criarSala("Cozinha", "mancha de sangue", NULL, NULL);
    Sala *biblioteca = criarSala("Biblioteca", "livro rasgado", NULL, NULL);
    Sala *jardim = criarSala("Jardim", "", NULL, NULL);
    Sala *escritorio = criarSala("Escrit√≥rio", "documento queimado", NULL, NULL);

    Sala *salaEstar = criarSala("Sala de Estar", "", cozinha, biblioteca);
    Sala *salaJantar = criarSala("Sala de Jantar", "ta√ßa quebrada", jardim, escritorio);

    Sala *hallEntrada = criarSala("Hall de Entrada", "", salaEstar, salaJantar);

    // √Årvore de pistas
    Pista *raizBST = NULL;

    // In√≠cio da explora√ß√£o
    explorarSalas(hallEntrada, &raizBST);

    return 0;
}
