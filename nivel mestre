#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TAM_HASH 10

// N√≥ da √°rvore de pistas
typedef struct PistaBST {
    char nome[30];
    struct PistaBST *esquerda;
    struct PistaBST *direita;
} PistaBST;

// N√≥ da lista encadeada da tabela hash
typedef struct Associacao {
    char pista[30];
    char suspeito[30];
    struct Associacao *prox;
} Associacao;

// Tabela hash
typedef struct {
    Associacao *tabela[TAM_HASH];
} HashTable;

// Fun√ß√£o de espalhamento simples (soma ASCII % TAM_HASH)
int hash(const char *pista) {
    int soma = 0;
    for (int i = 0; pista[i] != '\0'; i++) {
        soma += pista[i];
    }
    return soma % TAM_HASH;
}

// Cria nova pista na BST
PistaBST* criarPista(const char *nome) {
    PistaBST *nova = (PistaBST*)malloc(sizeof(PistaBST));
    strcpy(nova->nome, nome);
    nova->esquerda = nova->direita = NULL;
    return nova;
}

// Insere pista na BST
PistaBST* inserirPista(PistaBST *raiz, const char *nome) {
    if (raiz == NULL) return criarPista(nome);
    if (strcmp(nome, raiz->nome) < 0)
        raiz->esquerda = inserirPista(raiz->esquerda, nome);
    else if (strcmp(nome, raiz->nome) > 0)
        raiz->direita = inserirPista(raiz->direita, nome);
    return raiz;
}

// Exibe pistas em ordem
void emOrdem(PistaBST *raiz) {
    if (raiz != NULL) {
        emOrdem(raiz->esquerda);
        printf("üîé %s\n", raiz->nome);
        emOrdem(raiz->direita);
    }
}

// Inicializa tabela hash
void inicializarHash(HashTable *ht) {
    for (int i = 0; i < TAM_HASH; i++) {
        ht->tabela[i] = NULL;
    }
}

// Insere associa√ß√£o pista ‚Üí suspeito
void inserirNaHash(HashTable *ht, const char *pista, const char *suspeito) {
    int indice = hash(pista);
    Associacao *nova = (Associacao*)malloc(sizeof(Associacao));
    strcpy(nova->pista, pista);
    strcpy(nova->suspeito, suspeito);
    nova->prox = ht->tabela[indice];
    ht->tabela[indice] = nova;
}

// Lista todas as pistas por suspeito
void listarSuspeitos(HashTable *ht) {
    printf("\nüìÅ Pistas por suspeito:\n");
    for (int i = 0; i < TAM_HASH; i++) {
        Associacao *atual = ht->tabela[i];
        while (atual != NULL) {
            printf("üß© %s ‚Üí üïµÔ∏è %s\n", atual->pista, atual->suspeito);
            atual = atual->prox;
        }
    }
}

// Descobre o suspeito mais citado
void suspeitoMaisCitado(HashTable *ht) {
    char suspeitos[50][30];
    int contadores[50] = {0};
    int total = 0;

    for (int i = 0; i < TAM_HASH; i++) {
        Associacao *atual = ht->tabela[i];
        while (atual != NULL) {
            int encontrado = 0;
            for (int j = 0; j < total; j++) {
                if (strcmp(suspeitos[j], atual->suspeito) == 0) {
                    contadores[j]++;
                    encontrado = 1;
                    break;
                }
            }
            if (!encontrado) {
                strcpy(suspeitos[total], atual->suspeito);
                contadores[total] = 1;
                total++;
            }
            atual = atual->prox;
        }
    }

    int max = 0;
    for (int i = 1; i < total; i++) {
        if (contadores[i] > contadores[max]) {
            max = i;
        }
    }

    if (total > 0)
        printf("\nüéØ Suspeito mais citado: %s (%d pistas)\n", suspeitos[max], contadores[max]);
    else
        printf("\n‚ö†Ô∏è Nenhuma pista associada a suspeitos.\n");
}

// Simula√ß√£o do jogo
int main() {
    PistaBST *raizBST = NULL;
    HashTable ht;
    inicializarHash(&ht);

    // Simulando pistas encontradas
    raizBST = inserirPista(raizBST, "mancha de sangue");
    inserirNaHash(&ht, "mancha de sangue", "Sr. Black");

    raizBST = inserirPista(raizBST, "livro rasgado");
    inserirNaHash(&ht, "livro rasgado", "Sra. White");

    raizBST = inserirPista(raizBST, "documento queimado");
    inserirNaHash(&ht, "documento queimado", "Srta. Scarlet");

    raizBST = inserirPista(raizBST, "ta√ßa quebrada");
    inserirNaHash(&ht, "ta√ßa quebrada", "Sr. Black");

    raizBST = inserirPista(raizBST, "pegada de lama");
    inserirNaHash(&ht, "pegada de lama", "Sr. Black");

    // Exibi√ß√£o
    printf("\nüìú Pistas coletadas:\n");
    emOrdem(raizBST);

    listarSuspeitos(&ht);
    suspeitoMaisCitado(&ht);

    return 0;
}
